using Hideez.SDK.Communication;
using Hideez.SDK.Communication.Log;
using HideezMiddleware.DeviceConnection.Workflow.ConnectionFlow;
using HideezMiddleware.Tasks;
<<<<<<< HEAD
using Meta.Lib.Modules.PubSub;
=======
using HideezMiddleware.Utils.WorkstationHelper;
using Microsoft.Win32;
using System.Threading.Tasks;
>>>>>>> release/3.7

namespace HideezMiddleware
{
    public class SessionUnlockMethodMonitor : Logger
    {
<<<<<<< HEAD
        readonly ConnectionFlowProcessorBase _connectionFlowProcessor;
        private readonly IMetaPubSub _messenger;
=======
        readonly ConnectionFlowProcessor _connectionFlowProcessor;
        readonly TapConnectionProcessor _tapProcessor;
        readonly RfidConnectionProcessor _rfidProcessor;
        readonly ProximityConnectionProcessor _proximityProcessor;
        readonly WinBleAutomaticConnectionProcessor _winBleProcessor;
        readonly IWorkstationHelper _workstationHelper;
>>>>>>> release/3.7

        UnlockSessionSwitchProc _unlockProcedure = null;
        readonly object _upLock = new object();

        internal UnlockSessionSwitchProc UnlockProcedure { get => _unlockProcedure; }

<<<<<<< HEAD
        public SessionUnlockMethodMonitor(ConnectionFlowProcessorBase connectionFlowProcessor,
            IMetaPubSub messenger,
            ILog log)
            : base(nameof(SessionUnlockMethodMonitor), log)
        {
            _connectionFlowProcessor = connectionFlowProcessor;
            _messenger = messenger;
=======
        public SessionUnlockMethodMonitor(ConnectionFlowProcessor connectionFlowProcessor,
                                          TapConnectionProcessor tapProcessor,
                                          RfidConnectionProcessor rfidProcessor,
                                          ProximityConnectionProcessor proximityProcessor,
                                          WinBleAutomaticConnectionProcessor winBleProcessor,
                                          IWorkstationHelper workstationHelper,
                                          ILog log): base(nameof(SessionUnlockMethodMonitor), log)
        {
            _connectionFlowProcessor = connectionFlowProcessor;
            _tapProcessor = tapProcessor;
            _rfidProcessor = rfidProcessor;
            _proximityProcessor = proximityProcessor;
            _winBleProcessor = winBleProcessor;
            _workstationHelper = workstationHelper;
>>>>>>> release/3.7

            _connectionFlowProcessor.Started += ConnectionFlowProcessor_Started;
            SessionSwitchMonitor.SessionSwitch += SessionSwitchMonitor_SessionSwitch;
        }

        void ConnectionFlowProcessor_Started(object sender, string e)
        {
            lock (_upLock)
            {
<<<<<<< HEAD
                if (_unlockProcedure != null)
                    _unlockProcedure.Dispose();
                
                _unlockProcedure = new UnlockSessionSwitchProc(e, _connectionFlowProcessor, _messenger);
                WriteLine("Started unlock procedure");
=======
                if (_workstationHelper.IsCurrentSessionLocked())
                {
                    _unlockProcedure = new UnlockSessionSwitchProc(e, _connectionFlowProcessor, _tapProcessor, _rfidProcessor, _proximityProcessor, _winBleProcessor);
                    WriteLine("Started unlock procedure");
                }
>>>>>>> release/3.7
            }
        }

        void SessionSwitchMonitor_SessionSwitch(int sessionId, SessionSwitchReason reason)
        {
            if (reason == SessionSwitchReason.SessionLogoff || reason == SessionSwitchReason.SessionLock)
                _unlockProcedure = null;
        }

        public async Task<SessionSwitchSubject> GetUnlockMethodAsync()
        {
<<<<<<< HEAD
            if (_unlockProcedure == null)
                return SessionSwitchSubject.NonHideez;
            else 
                return _unlockProcedure.UnlockMethod;
=======
            if (_unlockProcedure != null)
            {
                await _unlockProcedure.WaitFinish(); 

                if (_unlockProcedure.FlowFinished && _unlockProcedure.FlowUnlockResult.IsSuccessful)
                    return _unlockProcedure.UnlockMethod;
            }

            return SessionSwitchSubject.NonHideez;
>>>>>>> release/3.7
        }
    }
}
