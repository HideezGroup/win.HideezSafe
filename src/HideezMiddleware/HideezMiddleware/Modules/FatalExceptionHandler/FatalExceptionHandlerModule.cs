using NLog;
using System;
using System.IO;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Threading.Tasks;

namespace HideezMiddleware.Modules.FatalExceptionHandler
{
    public sealed class FatalExceptionHandlerModule : IModule
    {
        public FatalExceptionHandlerModule()
        {
            AppDomain.CurrentDomain.UnhandledException +=
                (s, e) => LogUnhandledException((Exception)e.ExceptionObject, "AppDomain.CurrentDomain.UnhandledException");

            TaskScheduler.UnobservedTaskException +=
                (s, e) => LogUnhandledException(e.Exception, "TaskScheduler.UnobservedTaskException");
        }

        void LogUnhandledException(Exception e, string source)
        {
            try
            {
                // The following AggregatedException is generated by internal error in SignalR Core Hub
                // AggregateException->WebSocketException->IOException->SocketException
                // The following check is used to wrap and ignore these exceptions as they are not impacting the application
                if (e is AggregateException &&
                    e.InnerException is WebSocketException &&
                    e.InnerException?.InnerException is IOException &&
                    e.InnerException?.InnerException?.InnerException is SocketException)
                {
                    LogManager.GetCurrentClassLogger().Debug($"{nameof(FatalExceptionHandler)}_LogUnhandledException | Captured unobserved SignalR exception");
                    return;
                }

                LogManager.EnableLogging();

                var fatalLogger = LogManager.GetCurrentClassLogger();
                var assemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName();

                fatalLogger.Fatal($"Unhandled exception in {assemblyName.Name} v{assemblyName.Version} {source}");
                fatalLogger.Fatal(e);
                LogManager.Flush();
            }
            catch (Exception)
            {
                try
                {
                    Environment.FailFast("An error occured while handling fatal error", e as Exception);
                }
                catch (Exception exc)
                {
                    Environment.FailFast("An error occured while handling an error during fatal error handling", exc);
                }
            }
        }
    }
}
